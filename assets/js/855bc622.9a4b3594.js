"use strict";(self.webpackChunkdev_notes=self.webpackChunkdev_notes||[]).push([[794],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>y});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,y=u["".concat(i,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(y,s(s({ref:t},c),{},{components:n})):r.createElement(y,s({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7676:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"nats",sidebar_position:5},s="NATS",l={unversionedId:"workspace/techniques/nats",id:"workspace/techniques/nats",title:"NATS",description:"Page describes how to use NATS in NestJS",source:"@site/docs/workspace/techniques/nats.mdx",sourceDirName:"workspace/techniques",slug:"/workspace/techniques/nats",permalink:"/dev-notes/workspace/techniques/nats",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"nats",sidebar_position:5},sidebar:"docs",previous:{title:"Logging",permalink:"/dev-notes/workspace/techniques/logging"}},i={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Features",id:"features",level:3},{value:"Usage/Examples",id:"usageexamples",level:3},{value:"Nats Request/Reply",id:"nats-requestreply",level:3},{value:"JetStream Publish/Subscribe",id:"jetstream-publishsubscribe",level:3},{value:"Source code",id:"source-code",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"nats"},"NATS"),(0,a.kt)("p",null,"Page describes how to use NATS in NestJS"),(0,a.kt)("h2",{id:"problem"},"Problem"),(0,a.kt)("p",null,"NestJS does not provide full NATS support in their framework."),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("p",null,"Let's create our own :)"),(0,a.kt)("p",null,"Install ",(0,a.kt)("inlineCode",{parentName:"p"},"@tematools/nats")," library"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @tematools/nats\n")),(0,a.kt)("h3",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Built above ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/nats-io/nats.js"},"nats.js")),(0,a.kt)("li",{parentName:"ul"},"Nats Core support"),(0,a.kt)("li",{parentName:"ul"},"Nats JetStream support"),(0,a.kt)("li",{parentName:"ul"},"Decorators (ex. @Consume, @Reply)")),(0,a.kt)("h3",{id:"usageexamples"},"Usage/Examples"),(0,a.kt)("p",null,"Import NatsModule in your AppModule"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"NatsModule is a global module.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},"import { NatsModule } from '@tematools/nats'\nimport { HealthChecksModule } from '@tematools/health-checks'\nimport * as env from 'env-var'\n\n@Module({\n    imports: [\n        HealthChecksModule, // (optional) import HealthChecksModule to get NATS health status\n        NatsModule.forRoot({\n            servers: env.get('NATS_URL').required().asString(),\n            /* all nats.js options here */\n        }),\n    ]\n})\nexport class AppModule {}\n")),(0,a.kt)("p",null,"After that, you can use NATS client services in your modules. "),(0,a.kt)("h3",{id:"nats-requestreply"},"Nats Request/Reply"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Inject ",(0,a.kt)("inlineCode",{parentName:"p"},"NatsClientService")," for access to NATS Core features. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"@Controller()")," class decorator for ",(0,a.kt)("inlineCode",{parentName:"p"},"@Reply()")," method decorator")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="cat.controler.ts"',title:'"cat.controler.ts"'},"import { Controller } from '@nestjs/common'\nimport {\n    NatsClientService,\n    Reply,\n    ReplyPayload,\n    ReplyResponse,\n} from '@tematools/nats'\n\n@Controller()\nexport class CatController {\n    constructor(\n        private readonly natsClient: NatsClientService,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // request ping \n        await this.natsClient.request('ping', { text: 'hello' })\n    }\n\n    // Reply for ping request\n    @Reply('ping')\n    async ping(payload: ReplyPayload<any>): Promise<ReplyResponse<string>> {\n        const response = `pong with message ${JSON.stringify(payload.data)}`\n\n        const responseHeaders = {\n            ping: 'pong',\n        }\n\n        return {\n            data: response,\n            headers: responseHeaders,\n        }\n    }\n}\n\n")),(0,a.kt)("h3",{id:"jetstream-publishsubscribe"},"JetStream Publish/Subscribe"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Inject ",(0,a.kt)("inlineCode",{parentName:"p"},"NatsJetStreamClientService")," for access to NATS JetStream features.  Use ",(0,a.kt)("inlineCode",{parentName:"p"},"@Controller()")," class decorator for ",(0,a.kt)("inlineCode",{parentName:"p"},"@Consume()")," method decorator")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="cat.controller.ts"',title:'"cat.controller.ts"'},"import { Controller, OnModuleInit } from '@nestjs/common'\nimport {\n    Consume,\n    ConsumePayload,\n    ConsumerAcks,\n    NatsJetStreamClientService,\n    PublishOptions,\n} from '@tematools/nats'\nimport { AckPolicy, PubAck, RetentionPolicy, StorageType } from 'nats'\n\n@Controller()\nexport class CatController {\n    constructor(\n        private readonly natsJetStreamClient: NatsJetStreamClientService,\n    ) {}\n\n    // create stream\n    async onApplicationBootstrap() {\n        await this.natsJetStreamClient.createStream({\n            autoupdate: true,\n            name: 'stream_name',\n            retention: RetentionPolicy.Limits,\n            storage: StorageType.File,\n            subjects: Object.values(SampleNatsJetStreamSubjectsEnum),\n        })\n\n        // publish a message\n        await this.natsJetStreamClient.publish('ping', 'pong', { timeout: 5000 })\n    }\n\n    // consume message from stream\n    @Consume({\n        stream: 'stream_name',\n        consumer: {\n            durable_name: 'sample-consumer',\n            filter_subject: 'ping',\n            ack_policy: AckPolicy.All,\n        }\n    })\n    async consumePing(payload: ConsumePayload<any>, acks: ConsumerAcks) {\n        try {\n            // do logic here\n            acks.ack()\n        } catch (error) {\n            console.error(error)\n            acks.nack()\n        }\n    }\n}\n")),(0,a.kt)("h2",{id:"source-code"},"Source code"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/temarusanov/nx/tree/main/libs/external/nats"},"Don't trust, verify!"))))}m.isMDXComponent=!0}}]);