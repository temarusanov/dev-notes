"use strict";(self.webpackChunkdev_notes=self.webpackChunkdev_notes||[]).push([[419],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},h=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=l(n),d=a,u=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(u,i(i({ref:t},h),{},{components:n})):r.createElement(u,i({ref:t},h))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[p]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>h,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var r=n(7462),a=n(7294),o=n(3905),i=n(6010);const s={browserWindow:"browserWindow_my1Q",browserWindowHeader:"browserWindowHeader_jXSR",row:"row_KZDM",buttons:"buttons_uHc7",right:"right_oyze",browserWindowAddressBar:"browserWindowAddressBar_Pd8y",dot:"dot_giz1",browserWindowMenuIcon:"browserWindowMenuIcon_Vhuh",bar:"bar_rrRL",browserWindowBody:"browserWindowBody_Idgs"};function c(e){let{children:t,minHeight:n,url:r="http://localhost:3000"}=e;return a.createElement("div",{className:s.browserWindow,style:{minHeight:n}},a.createElement("div",{className:s.browserWindowHeader},a.createElement("div",{className:s.buttons},a.createElement("span",{className:s.dot,style:{background:"#f25f58"}}),a.createElement("span",{className:s.dot,style:{background:"#fbbe3c"}}),a.createElement("span",{className:s.dot,style:{background:"#58cb42"}})),a.createElement("div",{className:(0,i.Z)(s.browserWindowAddressBar,"text--truncate")},r),a.createElement("div",{className:s.browserWindowMenuIcon},a.createElement("div",null,a.createElement("span",{className:s.bar}),a.createElement("span",{className:s.bar}),a.createElement("span",{className:s.bar})))),a.createElement("div",{className:s.browserWindowBody},t))}const l={id:"health-checks",sidebar_position:2},h="Health Checks",p={unversionedId:"techniques/health-checks",id:"techniques/health-checks",title:"Health Checks",description:"Page describes how to break the link between the application and the connected services (DB, RMQ, Kafka, etc)",source:"@site/docs/techniques/health-checks.mdx",sourceDirName:"techniques",slug:"/techniques/health-checks",permalink:"/dev-notes/techniques/health-checks",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"health-checks",sidebar_position:2},sidebar:"docs",previous:{title:"Dependency Injection",permalink:"/dev-notes/techniques/dependency-injection"}},m={},d=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2}],u={toc:d},b="wrapper";function f(e){let{components:t,...a}=e;return(0,o.kt)(b,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"health-checks"},"Health Checks"),(0,o.kt)("p",null,"Page describes how to break the link between the application and the connected services (DB, RMQ, Kafka, etc)"),(0,o.kt)("h2",{id:"problem"},"Problem"),(0,o.kt)("p",null,"Imagine a huge application with a bunch of internal services, you are tasked with changing the pipe in one of the controllers. Pipe has nothing to do with the database or Kafka. In order to run the application and test the pipe, you will need to bring up the database and all external services. Not very convenient, huh?"),(0,o.kt)("p",null,"How to run an application that does not depend on a database, kafka or any other internal services? How to get service connection status from an application?"),(0,o.kt)("h2",{id:"solution"},"Solution"),(0,o.kt)("p",null,"Do not terminate the application if the connection to internal services failed. The application should work even if it is not connected to the database"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"A health check represents a summary of health indicators. A health indicator executes a check of a service, whether it is in a healthy or unhealthy state. A health check is positive if all the assigned health indicators are up and running.")),(0,o.kt)("p",null,"Create a HealthCheckModule with a controller"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="libs/core/health-checks/src/lib/health-checks.controller.ts"',title:'"libs/core/health-checks/src/lib/health-checks.controller.ts"'},"import { Controller, Get, Logger } from '@nestjs/common';\nimport { CustomInject } from 'nestjs-custom-injector';\nimport { HEALTH_CHECKS_PROVIDER } from './health-checks.config';\nimport { HealthCheckResult } from './interfaces/health-check-result.interface';\nimport { HealthIndicator } from './interfaces/health-indicator.interface';\n\n@Controller()\nexport class HealthChecksController {\n  private _logger = new Logger(HealthChecksController.name);\n  private _appStartedAt: number = Date.now();\n\n  @CustomInject<HealthIndicator>(HEALTH_CHECKS_PROVIDER, {\n    multi: true,\n  })\n  private healthIndicators!: HealthIndicator[];\n\n  @Get('/health')\n  async check(): Promise<HealthCheckResult> {\n    const timestamp = Date.now();\n    const uptime = Math.floor((timestamp - this._appStartedAt) / 1000);\n\n    const services = await Promise.all(\n      this.healthIndicators.map(\n        async (indicator) => await indicator.isHealthy()\n      )\n    );\n\n    const successfulServices = services.filter((s) => s.status === 'up').length;\n    const ratio = +(successfulServices / services.length).toFixed(2);\n\n    return {\n      ratio,\n      uptime,\n      timestamp,\n      services,\n    };\n  }\n}\n")),(0,o.kt)("p",null,"Then catch connection error of your ORM or transport service. As example I use Prisma client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="libs/core/prisma-client/src/lib/prisma-client.service.ts"',title:'"libs/core/prisma-client/src/lib/prisma-client.service.ts"'},"async onModuleInit(): Promise<void> {\n    try {\n        // connect to the database\n        await this.$connect()\n    } catch (err) {\n        // do not throw error here\n        this.logger.error(err, err.stack)\n    }\n}\n")),(0,o.kt)("p",null,"Create a Prisma Health Indicator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="libs/core/prisma-client/src/lib/prisma-client-connection.health.ts"',title:'"libs/core/prisma-client/src/lib/prisma-client-connection.health.ts"'},"import { Injectable } from '@nestjs/common';\nimport { HealthIndicator, HealthIndicatorResult } from '@nx/core/health-checks';\nimport { PrismaClientService } from './prisma-client.service';\n\n@Injectable()\nexport class PrismaClientConnectionHealthIndicator implements HealthIndicator {\n  name = 'database';\n\n  constructor(private readonly prismaClientService: PrismaClientService) {}\n\n  async isHealthy(): Promise<HealthIndicatorResult> {\n    try {\n      await this.prismaClientService.$queryRaw<\n        { dt: string }[]\n      >`SELECT now() dt`;\n\n      // drop here everything you want\n      return {\n        name: this.name,\n        status: 'up',\n      };\n    } catch (error) {\n      return {\n        name: this.name,\n        status: 'down',\n        error: error.message,\n      };\n    }\n  }\n}\n")),(0,o.kt)("p",null,"As a result we have"),(0,o.kt)(c,{url:"http://localhost:3000/api/health",minHeight:240,mdxType:"BrowserWindow"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ratio": 1,\n  "uptime": 5,\n  "timestamp": 1675597500626,\n  "services": [\n    {\n      "name": "database",\n      "status": "up",\n    },\n    {\n      "name": "my-service",\n      "status": "up",\n      "details": {\n        "entitiesCreated": 500\n      }\n    }\n  ]\n}\n'))),(0,o.kt)("p",null,"With Prisma connection error application is still working"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(4712).Z,width:"1008",height:"223"})),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Checkout full example ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/temarusanov/nx/tree/master/libs/core/health-checks/src/lib"},"here"))))}f.isMDXComponent=!0},4712:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/hc-log-1704d9b57c24bcef3b2bf0d2a38cd474.png"}}]);